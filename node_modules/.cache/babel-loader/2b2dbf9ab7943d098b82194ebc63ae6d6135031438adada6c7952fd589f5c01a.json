{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// إدخال التوكن في كل طلب\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) config.headers.Authorization = `Bearer ${token}`;\n  return config;\n}, error => Promise.reject(error));\n\n// التعامل مع أخطاء الاستجابة\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// خدمات الشركة العامة للشركات المشتركه\nexport const publicCompanyService = {\n  // 🔹 الحصول على بيانات الشركة عبر API Key\n  getCompanyByApiKey: async apiKey => {\n    try {\n      const res = await api.get(`/public/company/${apiKey}`);\n      if (res.data.success) return res.data.company;\n      throw new Error(\"Company not found\");\n    } catch (err) {\n      var _err$response;\n      console.error(\"Fetch company by API key error:\", ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      throw err;\n    }\n  },\n  // 🔹 إرسال رسالة دردشة عبر AI\n  sendAiMessage: async (apiKey, prompt) => {\n    try {\n      const res = await api.post(\"/public/chat\", {\n        companyApiKey: apiKey,\n        prompt\n      });\n      if (res.data.success) return res.data.reply;\n      throw new Error(res.data.error || \"No reply from AI\");\n    } catch (err) {\n      var _err$response2;\n      console.error(\"Send AI message error:\", ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || err.message);\n      throw err;\n    }\n  },\n  // 🔹 جلب مفتاح مؤقت (Temp Key)\n  getTempKey: async companyId => {\n    try {\n      const res = await api.get(`/public/temp-key/${companyId}`);\n      if (res.data.success) return res.data.tempKey;\n      throw new Error(res.data.error || \"Failed to get temp key\");\n    } catch (err) {\n      var _err$response3;\n      console.error(\"Temp key fetch error:\", ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || err.message);\n      throw err;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","publicCompanyService","getCompanyByApiKey","apiKey","res","get","data","success","company","Error","err","_err$response","console","message","sendAiMessage","prompt","post","companyApiKey","reply","_err$response2","getTempKey","companyId","tempKey","_err$response3"],"sources":["C:/Users/mido2/Downloads/AiThor/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: { 'Content-Type': 'application/json' },\r\n});\r\n\r\n// إدخال التوكن في كل طلب\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// التعامل مع أخطاء الاستجابة\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// خدمات الشركة العامة للشركات المشتركه\r\nexport const publicCompanyService = {\r\n  // 🔹 الحصول على بيانات الشركة عبر API Key\r\n  getCompanyByApiKey: async (apiKey) => {\r\n    try {\r\n      const res = await api.get(`/public/company/${apiKey}`);\r\n      if (res.data.success) return res.data.company;\r\n      throw new Error(\"Company not found\");\r\n    } catch (err) {\r\n      console.error(\"Fetch company by API key error:\", err.response?.data || err.message);\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  // 🔹 إرسال رسالة دردشة عبر AI\r\n  sendAiMessage: async (apiKey, prompt) => {\r\n    try {\r\n      const res = await api.post(\"/public/chat\", { companyApiKey: apiKey, prompt });\r\n      if (res.data.success) return res.data.reply;\r\n      throw new Error(res.data.error || \"No reply from AI\");\r\n    } catch (err) {\r\n      console.error(\"Send AI message error:\", err.response?.data || err.message);\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  // 🔹 جلب مفتاح مؤقت (Temp Key)\r\n  getTempKey: async (companyId) => {\r\n    try {\r\n      const res = await api.get(`/public/temp-key/${companyId}`);\r\n      if (res.data.success) return res.data.tempKey;\r\n      throw new Error(res.data.error || \"Failed to get temp key\");\r\n    } catch (err) {\r\n      console.error(\"Temp key fetch error:\", err.response?.data || err.message);\r\n      throw err;\r\n    }\r\n  },\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}