{"ast":null,"code":"import axios from 'axios';\nrouter.get(\"/public/temp-key/:companyId\", async (req, res) => {\n  try {\n    const {\n      companyId\n    } = req.params;\n    const company = await Company.findById(companyId);\n    if (!company) return res.status(404).json({\n      success: false,\n      error: \"Company not found\"\n    });\n\n    // هنا ممكن تولد مفتاح مؤقت (مثال: token قصير المدة)\n    const tempKey = company.apiKey; // أو أي طريقة توليد مفتاح مؤقت\n    res.json({\n      success: true,\n      tempKey\n    });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({\n      success: false,\n      error: \"Server error\"\n    });\n  }\n});\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// إدخال التوكن في كل طلب\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// التعامل مع أخطاء الاستجابة\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// خدمات المصادقة\nexport const authService = {\n  login: async (email, password) => {\n    const response = await api.post('/auth/login', {\n      email,\n      password\n    });\n    return response.data;\n  },\n  register: async (name, email, password) => {\n    const response = await api.post('/auth/register', {\n      name,\n      email,\n      password\n    });\n    return response.data;\n  }\n};\n\n// خدمات الشركة\nexport const companyService = {\n  getCompany: async () => {\n    const response = await api.get('/company');\n    return response.data;\n  },\n  updateCompany: async companyData => {\n    const response = await api.post('/company', companyData);\n    return response.data;\n  },\n  getRequests: async () => {\n    const response = await api.get('/company/requests');\n    return response.data;\n  },\n  deleteRequest: async index => {\n    const response = await api.delete(`/company/requests/${index}`);\n    return response.data;\n  },\n  submitExternalRequest: async (apiKey, customerName, product, message) => {\n    const response = await api.post('/company/external-request', {\n      apiKey,\n      customerName,\n      product,\n      message\n    });\n    return response.data;\n  },\n  // 🔹 جلب مفتاح مؤقت (لصفحة AI)\n  getTempKey: async companyId => {\n    try {\n      const res = await api.get(`/public/temp-key/${companyId}`);\n      if (res.data.success) return res.data.tempKey;\n      throw new Error(res.data.error || \"Failed to get temp key\");\n    } catch (err) {\n      var _err$response, _err$response2;\n      console.error(\"Temp key fetch error:\", (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status, ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || err.message);\n      throw err;\n    }\n  }\n};\n\n// خدمات المشاريع\nexport const projectService = {\n  getProjects: async () => {\n    const response = await api.get('/projects');\n    return response.data;\n  },\n  createProject: async projectData => {\n    const response = await api.post('/projects', projectData);\n    return response.data;\n  },\n  updateProject: async (id, projectData) => {\n    const response = await api.put(`/projects/${id}`, projectData);\n    return response.data;\n  },\n  deleteProject: async id => {\n    const response = await api.delete(`/projects/${id}`);\n    return response.data;\n  }\n};\n\n// خدمات الدردشة\n// خدمات الشركة العامة للشركات المشتركه\nexport const publicCompanyService = {\n  // 🔹 الحصول على بيانات الشركة عبر API Key\n  getCompanyByApiKey: async apiKey => {\n    try {\n      const res = await api.get(`/public/company/${apiKey}`);\n      if (res.data.success) return res.data.company;\n      throw new Error(\"Company not found\");\n    } catch (err) {\n      var _err$response3;\n      console.error(\"Fetch company by API key error:\", ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || err.message);\n      throw err;\n    }\n  },\n  // 🔹 إرسال رسالة دردشة عبر AI\n  sendAiMessage: async (apiKey, prompt) => {\n    try {\n      const res = await api.post(\"/public/chat\", {\n        companyApiKey: apiKey,\n        prompt\n      });\n      if (res.data.success) return res.data.reply;\n      throw new Error(res.data.error || \"No reply from AI\");\n    } catch (err) {\n      var _err$response4;\n      console.error(\"Send AI message error:\", ((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : _err$response4.data) || err.message);\n      throw err;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","router","get","req","res","companyId","params","company","Company","findById","status","json","success","error","tempKey","apiKey","err","console","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","Promise","reject","response","_error$response","removeItem","window","location","href","authService","login","email","password","post","data","register","name","companyService","getCompany","updateCompany","companyData","getRequests","deleteRequest","index","delete","submitExternalRequest","customerName","product","message","getTempKey","Error","_err$response","_err$response2","projectService","getProjects","createProject","projectData","updateProject","id","put","deleteProject","publicCompanyService","getCompanyByApiKey","_err$response3","sendAiMessage","prompt","companyApiKey","reply","_err$response4"],"sources":["C:/Users/mido2/Downloads/AiThor/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nrouter.get(\"/public/temp-key/:companyId\", async (req, res) => {\r\n  try {\r\n    const { companyId } = req.params;\r\n    const company = await Company.findById(companyId);\r\n    if (!company) return res.status(404).json({ success: false, error: \"Company not found\" });\r\n\r\n    // هنا ممكن تولد مفتاح مؤقت (مثال: token قصير المدة)\r\n    const tempKey = company.apiKey; // أو أي طريقة توليد مفتاح مؤقت\r\n    res.json({ success: true, tempKey });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ success: false, error: \"Server error\" });\r\n  }\r\n});\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// إدخال التوكن في كل طلب\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// التعامل مع أخطاء الاستجابة\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// خدمات المصادقة\r\nexport const authService = {\r\n  login: async (email, password) => {\r\n    const response = await api.post('/auth/login', { email, password });\r\n    return response.data;\r\n  },\r\n\r\n  register: async (name, email, password) => {\r\n    const response = await api.post('/auth/register', { name, email, password });\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// خدمات الشركة\r\nexport const companyService = {\r\n  getCompany: async () => {\r\n    const response = await api.get('/company');\r\n    return response.data;\r\n  },\r\n\r\n  updateCompany: async (companyData) => {\r\n    const response = await api.post('/company', companyData);\r\n    return response.data;\r\n  },\r\n\r\n  getRequests: async () => {\r\n    const response = await api.get('/company/requests');\r\n    return response.data;\r\n  },\r\n\r\n  deleteRequest: async (index) => {\r\n    const response = await api.delete(`/company/requests/${index}`);\r\n    return response.data;\r\n  },\r\n\r\n  submitExternalRequest: async (apiKey, customerName, product, message) => {\r\n    const response = await api.post('/company/external-request', {\r\n      apiKey,\r\n      customerName,\r\n      product,\r\n      message,\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // 🔹 جلب مفتاح مؤقت (لصفحة AI)\r\n  getTempKey: async (companyId) => {\r\n    try {\r\n      const res = await api.get(`/public/temp-key/${companyId}`);\r\n      if (res.data.success) return res.data.tempKey;\r\n      throw new Error(res.data.error || \"Failed to get temp key\");\r\n    } catch (err) {\r\n      console.error(\"Temp key fetch error:\", err.response?.status, err.response?.data || err.message);\r\n      throw err;\r\n    }\r\n  },\r\n};\r\n\r\n// خدمات المشاريع\r\nexport const projectService = {\r\n  getProjects: async () => {\r\n    const response = await api.get('/projects');\r\n    return response.data;\r\n  },\r\n\r\n  createProject: async (projectData) => {\r\n    const response = await api.post('/projects', projectData);\r\n    return response.data;\r\n  },\r\n\r\n  updateProject: async (id, projectData) => {\r\n    const response = await api.put(`/projects/${id}`, projectData);\r\n    return response.data;\r\n  },\r\n\r\n  deleteProject: async (id) => {\r\n    const response = await api.delete(`/projects/${id}`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// خدمات الدردشة\r\n// خدمات الشركة العامة للشركات المشتركه\r\nexport const publicCompanyService = {\r\n  // 🔹 الحصول على بيانات الشركة عبر API Key\r\n  getCompanyByApiKey: async (apiKey) => {\r\n    try {\r\n      const res = await api.get(`/public/company/${apiKey}`);\r\n      if (res.data.success) return res.data.company;\r\n      throw new Error(\"Company not found\");\r\n    } catch (err) {\r\n      console.error(\"Fetch company by API key error:\", err.response?.data || err.message);\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  // 🔹 إرسال رسالة دردشة عبر AI\r\n  sendAiMessage: async (apiKey, prompt) => {\r\n    try {\r\n      const res = await api.post(\"/public/chat\", { companyApiKey: apiKey, prompt });\r\n      if (res.data.success) return res.data.reply;\r\n      throw new Error(res.data.error || \"No reply from AI\");\r\n    } catch (err) {\r\n      console.error(\"Send AI message error:\", err.response?.data || err.message);\r\n      throw err;\r\n    }\r\n  },\r\n};\r\n\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}