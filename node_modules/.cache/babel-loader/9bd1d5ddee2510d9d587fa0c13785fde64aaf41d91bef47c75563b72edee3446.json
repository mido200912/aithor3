{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mido2\\\\Downloads\\\\AiThor\\\\frontend\\\\src\\\\pages\\\\CompanyChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { companyService } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompanyChat = ({\n  companyId\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const res = await companyChatService.getMessages(companyId);\n        setMessages(res);\n      } catch (err) {\n        console.error(\"Error fetching messages:\", err);\n      }\n    };\n    fetchMessages();\n  }, [companyId]);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const text = input.trim();\n    setMessages(prev => [...prev, {\n      user: \"me\",\n      text\n    }]);\n    setInput(\"\");\n    try {\n      const res = await companyChatService.sendAiMessage(companyId, text);\n      setMessages(prev => [...prev, res]);\n    } catch (err) {\n      console.error(err);\n      setMessages(prev => [...prev, {\n        user: \"AI\",\n        text: \"Error contacting AI\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [messages.map((m, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [m.user, \": \", m.text]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 31\n    }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: input,\n      onChange: e => setInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(CompanyChat, \"Z7bPrZHR9DDxNUXxHtFz54hQVxg=\");\n_c = CompanyChat;\nexport default CompanyChat;\nvar _c;\n$RefreshReg$(_c, \"CompanyChat\");","map":{"version":3,"names":["React","useState","useEffect","companyService","jsxDEV","_jsxDEV","CompanyChat","companyId","_s","messages","setMessages","input","setInput","fetchMessages","res","companyChatService","getMessages","err","console","error","sendMessage","trim","text","prev","user","sendAiMessage","children","map","m","i","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mido2/Downloads/AiThor/frontend/src/pages/CompanyChat.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { companyService } from \"../services/api\";\r\n\r\n\r\n\r\nconst CompanyChat = ({ companyId }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const res = await companyChatService.getMessages(companyId);\r\n        setMessages(res);\r\n      } catch (err) {\r\n        console.error(\"Error fetching messages:\", err);\r\n      }\r\n    };\r\n    fetchMessages();\r\n  }, [companyId]);\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n    const text = input.trim();\r\n    setMessages(prev => [...prev, { user: \"me\", text }]);\r\n    setInput(\"\");\r\n    try {\r\n      const res = await companyChatService.sendAiMessage(companyId, text);\r\n      setMessages(prev => [...prev, res]);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setMessages(prev => [...prev, { user: \"AI\", text: \"Error contacting AI\" }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {messages.map((m, i) => <div key={i}>{m.user}: {m.text}</div>)}\r\n      <input value={input} onChange={e => setInput(e.target.value)} />\r\n      <button onClick={sendMessage}>Send</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompanyChat;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,cAAc,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIjD,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMC,kBAAkB,CAACC,WAAW,CAACT,SAAS,CAAC;QAC3DG,WAAW,CAACI,GAAG,CAAC;MAClB,CAAC,CAAC,OAAOG,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;MAChD;IACF,CAAC;IACDJ,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACN,SAAS,CAAC,CAAC;EAEf,MAAMa,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAACT,KAAK,CAACU,IAAI,CAAC,CAAC,EAAE;IACnB,MAAMC,IAAI,GAAGX,KAAK,CAACU,IAAI,CAAC,CAAC;IACzBX,WAAW,CAACa,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAAEC,IAAI,EAAE,IAAI;MAAEF;IAAK,CAAC,CAAC,CAAC;IACpDV,QAAQ,CAAC,EAAE,CAAC;IACZ,IAAI;MACF,MAAME,GAAG,GAAG,MAAMC,kBAAkB,CAACU,aAAa,CAAClB,SAAS,EAAEe,IAAI,CAAC;MACnEZ,WAAW,CAACa,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAET,GAAG,CAAC,CAAC;IACrC,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBP,WAAW,CAACa,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;QAAEC,IAAI,EAAE,IAAI;QAAEF,IAAI,EAAE;MAAsB,CAAC,CAAC,CAAC;IAC7E;EACF,CAAC;EAED,oBACEjB,OAAA;IAAAqB,QAAA,GACGjB,QAAQ,CAACkB,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,kBAAKxB,OAAA;MAAAqB,QAAA,GAAcE,CAAC,CAACJ,IAAI,EAAC,IAAE,EAACI,CAAC,CAACN,IAAI;IAAA,GAApBO,CAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAyB,CAAC,CAAC,eAC9D5B,OAAA;MAAO6B,KAAK,EAAEvB,KAAM;MAACwB,QAAQ,EAAEC,CAAC,IAAIxB,QAAQ,CAACwB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChE5B,OAAA;MAAQiC,OAAO,EAAElB,WAAY;MAAAM,QAAA,EAAC;IAAI;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEV,CAAC;AAACzB,EAAA,CArCIF,WAAW;AAAAiC,EAAA,GAAXjC,WAAW;AAuCjB,eAAeA,WAAW;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}